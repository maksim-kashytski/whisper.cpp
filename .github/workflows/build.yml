name: CI

on:
  workflow_dispatch: # allows manual triggering
  push:
    branches:
      - master
    paths: ['.github/workflows/build.yml', '**/CMakeLists.txt', '**/.cmake', '**/*.h', '**/*.hpp', '**/*.c', '**/*.cpp', '**/*.cu', '**/*.cuh', '**/*.swift', '**/*.m', '**/*.metal', '**/*.comp']
  pull_request:
    types: [opened, synchronize, reopened]
    paths: ['.github/workflows/build.yml', '**/CMakeLists.txt', '**/.cmake', '**/*.h', '**/*.hpp', '**/*.c', '**/*.cpp', '**/*.cu', '**/*.cuh', '**/*.swift', '**/*.m', '**/*.metal', '**/*.comp']

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  ubuntu_image: "ubuntu:22.04"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  # determine-tag:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     tag_name: ${{ steps.tag.outputs.name }}

  #   steps:
  #     - name: Checkout with full history
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Determine tag name
  #       id: tag
  #       shell: bash
  #       run: |
  #         BUILD_NUMBER=$(git rev-list --count HEAD)
  #         SHORT_HASH=$(git rev-parse --short=7 HEAD)
  #         CUSTOM_TAG="${{ github.event.inputs.pre_release_tag }}"

  #         echo "Raw values:"
  #         echo "BUILD_NUMBER: $BUILD_NUMBER"
  #         echo "SHORT_HASH: $SHORT_HASH"
  #         echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
  #         echo "CUSTOM_TAG: $CUSTOM_TAG"

  #         # Use custom tag if provided
  #         if [[ -n "$CUSTOM_TAG" ]]; then
  #           echo "Using custom tag"
  #           TAG_NAME="${CUSTOM_TAG}"
  #         elif [[ "${{ env.BRANCH_NAME }}" == "master" ]]; then
  #           echo "Using master branch format"
  #           TAG_NAME="b${BUILD_NUMBER}"
  #         else
  #           echo "Using non-master branch format"
  #           SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
  #           TAG_NAME="${SAFE_NAME}-b${BUILD_NUMBER}-${SHORT_HASH}"
  #         fi

  #         echo "Final tag name: $TAG_NAME"
  #         echo "name=$TAG_NAME" >> $GITHUB_OUTPUT

  # ubuntu-22:
  #   if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' ||
  #           github.event.inputs.run_type == 'full-ci' }}
  #   runs-on: ubuntu-22.04

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       arch: [linux/amd64, linux/ppc64le]

  #   steps:
  #     - name: Clone
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Build ${{ matrix.arch }}
  #       run: |
  #         docker run --platform ${{ matrix.arch }} --rm \
  #           -v ${{ github.workspace }}:/workspace \
  #           -w /workspace ${{ env.ubuntu_image }} /bin/sh -c '
  #           set -e
  #           apt update
  #           apt install -y build-essential libsdl2-dev cmake git
  #           cmake -B build
  #           cmake --build build --config Release -j $(nproc)'

  # ubuntu-22-arm64:
  #   if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' ||
  #           github.event.inputs.run_type == 'full-ci' }}
  #   runs-on: ubuntu-22.04

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       arch: [linux/arm64]

  #   steps:
  #     - name: Clone
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Build ${{ matrix.arch }}
  #       run: |
  #         docker run --platform ${{ matrix.arch }} --rm \
  #           -v ${{ github.workspace }}:/workspace \
  #           -w /workspace ${{ env.ubuntu_image }} /bin/sh -c '
  #           set -e
  #           apt update
  #           apt install -y build-essential libsdl2-dev cmake git
  #           cmake -B build -DGGML_NATIVE=OFF -DGGML_CPU_ARM_ARCH=armv8-a
  #           cmake --build build --config Release -j $(nproc)'

  # ubuntu-22-arm-v7:
  #   if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' ||
  #           github.event.inputs.run_type == 'full-ci' }}
  #   runs-on: ubuntu-22.04

  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       arch: [linux/arm/v7]

  #   steps:
  #     - name: Clone
  #       uses: actions/checkout@v4

  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3

  #     - name: Build ${{ matrix.arch }}
  #       run: |
  #         docker run --platform ${{ matrix.arch }} --rm \
  #           -v ${{ github.workspace }}:/workspace \
  #           -w /workspace ${{ env.ubuntu_image }} /bin/sh -c '
  #           set -e
  #           apt update
  #           apt install -y build-essential libsdl2-dev cmake git
  #           cmake -B build -DGGML_NATIVE=OFF -DGGML_CPU_ARM_ARCH=armv7-a+fp
  #           cmake --build build --config Release -j $(nproc)'

  macOS-latest-cmake-arm64:
    # runs-on: macOS-latest
    runs-on: macos-14

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.16
        with:
          key: macOS-latest-cmake-arm64
          evict-old-files: 1d

      - name: Dependencies
        id: depends
        continue-on-error: true
        run: |
          brew update
          brew install curl

      - name: Build
        id: cmake_build
        run: |
          sysctl -a
          cmake -B build -G Xcode \
            -DGGML_METAL_USE_BF16=ON \
            -DGGML_METAL_EMBED_LIBRARY=ON \
            -DWHISPER_BUILD_EXAMPLES=OFF \
            -DWHISPER_BUILD_TESTS=OFF \
            -DWHISPER_BUILD_SERVER=OFF \
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          cmake --build build --config Release -j $(sysctl -n hw.logicalcpu)
